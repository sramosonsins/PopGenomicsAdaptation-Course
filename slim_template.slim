// set up a simple neutral simulation
initialize() {

	// set the overall mutation rate
	initializeMutationRate(1e-5);
	// uniform recombination along the chromosome
	initializeRecombinationRate(1e-4); 

	// m1 mutation type: (neutral)
	initializeMutationType("m1", 0.5, "f", 0.0);
	// m2 mutation type: (deleterious)
	initializeMutationType("m2", 1.0, "f", -1.0);
	// m3 mutation type: (beneficial)
	initializeMutationType("m3", 0.5, "f", 0.005);

	// g1 genomic element type: (synonymous) uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	// g2 genomic element type: (nonsynonymous) uses all mutations
	initializeGenomicElementType("g2", c(m1,m2,m3), c(2,8,0));

	// uniform chromosome of length 30 kb

	count = 0;
	for (i in 0:30000) {
		count2 = count;
		count = count2 + 1;
		if (count == 1) {
			initializeGenomicElement(g2, i, i);
		} else if (count == 2) {
			initializeGenomicElement(g2, i, i);
		} else if (count == 3) {
			initializeGenomicElement(g1, i, i);
			count = 0;
		}
	}
}

// create a population of 1000 individuals
1{
	sim.addSubpop("p1", 1000);
}

// Split de p1 in the generation 5000
5000 { sim.addSubpopSplit("p2", 1000, p1); }

// Sudden Change in population size
9500 { p2.setSubpopulationSize(1000); }

//if required, force a strong selective sweep
//9900 {	
//	target = sample(p2.genomes, 100); //the mutation is in 100 individuals
//	target.addNewDrawnMutation(m3, 15000);//the mutation occurs at position 15000
//}

// Run to the final
10000 late() {
	// Select 5 samples from the outgroup and 25 samples of the target population and output to MS format
	// obtain random samples of genomes from the three subpopulations
	g_1 = sample(p2.genomes,25,F);
	g_2 = sample(p1.genomes,5,F);
	//Concatenate the 2 samples
	g_12=c(g_1,g_2);
		//Get the unique mutations in the sample, sorted by position
		m = sortBy(unique(g_12.mutations),"position");
		// print the number of segregating sites
		cat("//" + "\n");
		cat("segsites: "+ size(m) + "\n");
		//print the positions
		positions = format("%.6f", m.position / sim.chromosome.lastPosition);
		cat("positions: "+ paste(positions," ") + "\n");
		//print the sampled genomes
		for (genome in g_12){
			hasMuts = (match(m,genome.mutations) >= 0);
			cat(paste(asInteger(hasMuts),"") + "\n");
		}
}
